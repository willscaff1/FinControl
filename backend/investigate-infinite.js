const { MongoClient, ObjectId } = require('mongodb');

async function investigateInfiniteRecurring() {
  const client = new MongoClient('mongodb://localhost:27017');
  await client.connect();
  const db = client.db('financial-control');
  
  console.log('=== INVESTIGANDO POR QUE D√âBITO √â INFINITO E CR√âDITO N√ÉO ===');
  
  // Comparar SAL√ÅRIO (d√©bito) vs DisneyPlus (cr√©dito)
  const salario = await db.collection('transactions').findOne({
    description: 'SAL√ÅRIO',
    isRecurring: true
  });
  
  const disney = await db.collection('transactions').findOne({
    description: 'DisneyPlus',
    isRecurring: true
  });
  
  console.log('üí∞ SAL√ÅRIO (D√âBITO - INFINITO):');
  console.log('   - _id:', salario._id);
  console.log('   - Data cria√ß√£o:', salario.createdAt);
  console.log('   - Data da transa√ß√£o:', new Date(salario.date).toLocaleDateString());
  console.log('   - M√©todo pagamento:', salario.paymentMethod);
  console.log('   - isRecurring:', salario.isRecurring);
  console.log('   - recurringDay:', salario.recurringDay);
  
  console.log('\nüé¨ DISNEY (CR√âDITO - PARA EM 2027):');
  console.log('   - _id:', disney._id);
  console.log('   - Data cria√ß√£o:', disney.createdAt);
  console.log('   - Data da transa√ß√£o:', new Date(disney.date).toLocaleDateString());
  console.log('   - M√©todo pagamento:', disney.paymentMethod);
  console.log('   - isRecurring:', disney.isRecurring);
  console.log('   - recurringDay:', disney.recurringDay);
  
  // Contar transa√ß√µes filhas de cada um
  const salarioChildren = await db.collection('transactions').countDocuments({
    recurringParentId: salario._id
  });
  
  const disneyChildren = await db.collection('transactions').countDocuments({
    recurringParentId: disney._id
  });
  
  console.log('\nüìä CONTAGEM DE FILHAS:');
  console.log(`   üí∞ SAL√ÅRIO: ${salarioChildren} transa√ß√µes filhas`);
  console.log(`   üé¨ DISNEY: ${disneyChildren} transa√ß√µes filhas`);
  
  // Verificar as √∫ltimas transa√ß√µes de cada um
  const lastSalario = await db.collection('transactions').findOne({
    recurringParentId: salario._id
  }, { sort: { date: -1 } });
  
  const lastDisney = await db.collection('transactions').findOne({
    recurringParentId: disney._id
  }, { sort: { date: -1 } });
  
  console.log('\nüìÖ √öLTIMAS TRANSA√á√ïES:');
  console.log(`   üí∞ SAL√ÅRIO: ${new Date(lastSalario.date).toLocaleDateString()}`);
  console.log(`   üé¨ DISNEY: ${new Date(lastDisney.date).toLocaleDateString()}`);
  
  // Verificar quando foram criadas essas transa√ß√µes "m√£e"
  console.log('\nüïê HOR√ÅRIOS DE CRIA√á√ÉO:');
  console.log(`   üí∞ SAL√ÅRIO: ${salario.createdAt}`);
  console.log(`   üé¨ DISNEY: ${disney.createdAt}`);
  
  // Diferen√ßa de cria√ß√£o
  const diffMinutes = (disney.createdAt - salario.createdAt) / 1000 / 60;
  console.log(`   ‚è±Ô∏è  Diferen√ßa: ${diffMinutes.toFixed(2)} minutos`);
  
  // Verificar se h√° algum sistema autom√°tico que gera mais transa√ß√µes para d√©bito
  console.log('\nüîç VERIFICANDO GERA√á√ÉO AUTOM√ÅTICA...');
  
  // Buscar todas as transa√ß√µes de SAL√ÅRIO por data
  const allSalario = await db.collection('transactions').find({
    $or: [
      { _id: salario._id },
      { recurringParentId: salario._id }
    ]
  }).sort({ date: 1 }).toArray();
  
  console.log(`üí∞ SAL√ÅRIO - Total: ${allSalario.length} transa√ß√µes:`);
  console.log('   Primeiras 5:');
  allSalario.slice(0, 5).forEach((t, i) => {
    console.log(`     ${i+1}. ${new Date(t.date).toLocaleDateString()} (${t.isRecurring ? 'M√ÉE' : 'FILHA'})`);
  });
  console.log('   √öltimas 5:');
  allSalario.slice(-5).forEach((t, i) => {
    console.log(`     ${allSalario.length-4+i}. ${new Date(t.date).toLocaleDateString()} (${t.isRecurring ? 'M√ÉE' : 'FILHA'})`);
  });
  
  await client.close();
}

investigateInfiniteRecurring().catch(console.error);
